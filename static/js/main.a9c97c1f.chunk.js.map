{"version":3,"sources":["components/Field.tsx","components/EntryEditor.tsx","index.tsx"],"names":["Field","props","extendedField","field","onSchemaErrorsChanged","setInvalid","locale","sdk","locales","default","fieldDetails","contentType","fields","find","id","fieldEditorInterface","editor","editorInterface","controls","fieldId","extendedSDK","renderHeading","name","undefined","style","fontFamily","tokens","fontStackPrimary","widgetId","noteType","commonFields","headingFields","fieldsForLayout","Cards","Showcase","Entry","useState","visibleFields","setVisibleFields","useEffect","entry","layout","onValueChanged","fieldKeys","sys","Error","map","filter","f","includes","visibleFieldKeysFor","key","padding","spacingM","background","colorElementLightest","borderBottom","colorElementMid","spacing2Xs","spacingXl","getValue","init","root","document","getElementById","location","locations","LOCATION_ENTRY_EDITOR","component","EntryEditor","forEach","componentLocationSetting","is","render"],"mappings":"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","file":"static/js/main.a9c97c1f.chunk.js","sourcesContent":["import 'codemirror/lib/codemirror.css';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/field-editor-date/styles/styles.css';\nimport React from 'react';\nimport {\n  Paragraph,\n  Heading,\n  Note,\n} from '@contentful/forma-36-react-components';\nimport { FieldAPI, FieldExtensionSDK } from '@contentful/app-sdk';\nimport {\n  Field as DefaultField,\n  FieldWrapper as DefaultFieldWrapper,\n} from '@contentful/default-field-editors';\nimport tokens from '@contentful/forma-36-tokens';\n\ninterface FieldProps {\n  field: FieldAPI;\n  sdk: FieldExtensionSDK;\n}\n\nconst Field = (props: FieldProps) => {\n  // these properties are mocked to make the entryFieldAPI\n  // work, or at least not crash, when used in the place of FieldAPI\n  const extendedField = props.field as any as FieldAPI;\n\n  extendedField.onSchemaErrorsChanged = () => () => null;\n  extendedField.setInvalid = () => null;\n  extendedField.locale = props.sdk.locales.default;\n\n  const fieldDetails = props.sdk.contentType.fields.find(\n    ({ id }) => id === extendedField.id\n  );\n\n  const fieldEditorInterface = props.sdk.editor.editorInterface?.controls?.find(\n    ({ fieldId }) => fieldId === extendedField.id\n  );\n\n  const extendedSDK: FieldExtensionSDK = {\n    ...props.sdk,\n    field: extendedField,\n  };\n\n  const renderHeading =\n    extendedField.id === 'layout'\n      ? (name: string) => (\n          <>\n            <Heading>{name}</Heading>\n            <Paragraph>\n              Choose a layout to display relevant fields only\n            </Paragraph>\n          </>\n        )\n      : undefined;\n\n  if (fieldDetails && fieldEditorInterface) {\n    return (\n      <div style={{ fontFamily: tokens.fontStackPrimary }}>\n        <DefaultFieldWrapper\n          sdk={extendedSDK}\n          renderHeading={renderHeading}\n          name={fieldDetails.name}>\n          <DefaultField\n            sdk={extendedSDK}\n            widgetId={fieldEditorInterface.widgetId}\n          />\n        </DefaultFieldWrapper>\n      </div>\n    );\n  }\n\n  return (\n    <Note noteType=\"negative\">\n      Something went wrong. Try clicking on the \"Editor\" tab or reload the page.\n    </Note>\n  );\n};\n\nexport default Field;\n","import React from 'react';\nimport { Paragraph, Typography } from '@contentful/forma-36-react-components';\nimport {\n  EditorExtensionSDK,\n  FieldAPI,\n  FieldExtensionSDK,\n} from '@contentful/app-sdk';\nimport { useState } from 'react';\nimport Field from './Field';\nimport { useEffect } from 'react';\nimport { EntryFieldAPI } from '@contentful/app-sdk';\nimport { EntryAPI } from '@contentful/app-sdk';\nimport { ContentType } from '@contentful/app-sdk';\nimport tokens from '@contentful/forma-36-tokens';\n\ninterface EditorProps {\n  sdk: EditorExtensionSDK;\n}\n\ntype Layout = 'Cards' | 'Expandable cards' | 'Showcase';\n\nconst commonFields = ['layout', 'theme', 'cards'];\n\nconst headingFields = ['heading', 'headingSize', 'headingAlignment'];\n\nconst fieldsForLayout: { [key in Layout]: string[] } = {\n  Cards: [...commonFields, ...headingFields],\n  'Expandable cards': [...commonFields],\n  Showcase: [\n    ...commonFields,\n    ...headingFields,\n    'backgroundImage',\n    'backgroundColor',\n    'CTA',\n  ],\n};\n\nfunction visibleFieldKeysFor(contentType: ContentType, layout: Layout) {\n  if (contentType.sys.id !== 'cardsModule') {\n    throw new Error('This Entry Editor is only configured for CardsModule');\n  }\n  if (layout === undefined) {\n    return ['layout'];\n  }\n  if (!fieldsForLayout[layout]) {\n    throw new Error(`The \"${layout}\" layout is not implemented yet`);\n  }\n  const allFields = contentType.fields.map((field) => field.id);\n  return allFields.filter((f: string) => fieldsForLayout[layout].includes(f));\n}\n\nfunction getFieldsForKeys(entry: EntryAPI, keys: string[]) {\n  return keys.map((key) => entry.fields[key]);\n}\n\nconst Entry = (props: EditorProps) => {\n  const [visibleFields, setVisibleFields] = useState<EntryFieldAPI[]>([]);\n\n  useEffect(() => {\n    return props.sdk.entry.fields.layout.onValueChanged((layout: Layout) => {\n      const fieldKeys = visibleFieldKeysFor(props.sdk.contentType, layout);\n      setVisibleFields(getFieldsForKeys(props.sdk.entry, fieldKeys));\n    });\n  }, [props.sdk]);\n\n  return (\n    <>\n      {visibleFields.map((field) => {\n        return (\n          <div\n            key={field.id}\n            style={\n              field.id === 'layout'\n                ? {\n                    padding: `${tokens.spacingM} 0 1px`,\n                    background: tokens.colorElementLightest,\n                    borderBottom: `1px solid ${tokens.colorElementMid}`,\n                  }\n                : undefined\n            }>\n            <Field\n              field={field as unknown as FieldAPI}\n              sdk={props.sdk as FieldExtensionSDK}\n            />\n            <Typography\n              style={{ padding: `${tokens.spacing2Xs} ${tokens.spacingXl}` }}>\n              {field.id === 'layout' &&\n                props.sdk.entry.fields.layout.getValue() && (\n                  <Paragraph>\n                    We could have a preview or a short description for the \"\n                    {props.sdk.entry.fields.layout.getValue()}\" layout here...\n                  </Paragraph>\n                )}\n            </Typography>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nexport default Entry;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  // AppExtensionSDK,\n  // FieldExtensionSDK,\n  // SidebarExtensionSDK,\n  // DialogExtensionSDK,\n  EditorExtensionSDK,\n  // PageExtensionSDK,\n  init,\n  locations,\n} from '@contentful/app-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\n// import Config from './components/ConfigScreen';\nimport EntryEditor from './components/EntryEditor';\n// import Page from './components/Page';\n// import Sidebar from './components/Sidebar';\n// import Field from './components/Field';\n// import Dialog from './components/Dialog';\n\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk) => {\n    const root = document.getElementById('root');\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      // {\n      //   location: locations.LOCATION_APP_CONFIG,\n      //   component: <Config sdk={sdk as AppExtensionSDK} />,\n      // },\n      // {\n      //   location: locations.LOCATION_ENTRY_FIELD,\n      //   component: <Field sdk={sdk as FieldExtensionSDK} />,\n      // },\n      {\n        location: locations.LOCATION_ENTRY_EDITOR,\n        component: <EntryEditor sdk={sdk as EditorExtensionSDK} />,\n      },\n      // {\n      //   location: locations.LOCATION_DIALOG,\n      //   component: <Dialog sdk={sdk as DialogExtensionSDK} />,\n      // },\n      // {\n      //   location: locations.LOCATION_ENTRY_SIDEBAR,\n      //   component: <Sidebar sdk={sdk as SidebarExtensionSDK} />,\n      // },\n      // {\n      //   location: locations.LOCATION_PAGE,\n      //   component: <Page sdk={sdk as PageExtensionSDK} />,\n      // },\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach((componentLocationSetting) => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}