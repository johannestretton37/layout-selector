{"version":3,"sources":["components/ConfigScreen.tsx","components/Field.tsx","components/EntryEditor.tsx","index.tsx"],"names":["Config","props","onConfigure","a","parameters","state","handleChange","e","selected","layoutContentTypes","find","t","value","target","setState","currentContentType","fields","availableLayouts","handleClick","layout","fieldId","newFields","fieldsConfig","includes","console","log","filter","field","contentTypes","sdk","app","this","getParameters","space","getContentTypes","spaceContentTypes","items","contentType","some","id","map","validations","validation","undefined","in","sys","forEach","friendlyName","name","setReady","className","css","margin","length","noteType","width","onChange","option","availableLayout","onClick","Component","Field","extendedField","onSchemaErrorsChanged","setInvalid","locale","locales","default","fieldDetails","fieldEditorInterface","editor","editorInterface","controls","extendedSDK","renderHeading","style","fontFamily","tokens","fontStackPrimary","widgetId","Entry","useState","visibleFields","setVisibleFields","useEffect","entry","onValueChanged","fieldKeys","config","Error","f","visibleFieldKeysFor","key","padding","spacingM","background","colorElementLightest","borderBottom","colorElementMid","init","root","document","getElementById","installation","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_EDITOR","EntryEditor","componentLocationSetting","is","render"],"mappings":"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","file":"static/js/main.3fa11529.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppExtensionSDK, FieldAPI } from '@contentful/app-sdk';\nimport {\n  Heading,\n  Form,\n  Workbench,\n  Paragraph,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Note,\n} from '@contentful/forma-36-react-components';\nimport { Select, Option } from '@contentful/forma-36-react-components';\nimport { css } from 'emotion';\nimport { FieldsConfig } from './EntryEditor';\n\nexport interface AppInstallationParameters {\n  fieldsConfig: FieldsConfig;\n}\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK;\n}\n\ninterface ConfigState {\n  /**\n   * `parameters.fieldsConfig` is the final state that will be saved as config and available\n   * in the EntryEditor\n   *\n   * Example:\n   *\n   * ```\n   * const fieldsConfig = {\n   *   cardsModule: { // A contentType that has a 'layout' property\n   *     cards: ['title', 'layout'], // A layout\n   *     showcase: ['title', 'showcaseSpecifics'], // Another layout\n   *     // List all layouts and their visible fields here...\n   *   },\n   *   // More modules that use layout here...\n   * }\n   * ```\n   */\n  parameters: AppInstallationParameters;\n  currentContentType: string;\n  /**\n   * All content types in the space that has a property named \"layout\"\n   */\n  layoutContentTypes: any[];\n  contentTypes: any;\n  fields: any[];\n  availableLayouts: string[];\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = {\n      currentContentType: '',\n      layoutContentTypes: [],\n      contentTypes: {},\n      fields: [],\n      availableLayouts: [],\n      parameters: {\n        fieldsConfig: {},\n      },\n    };\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure());\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null =\n      await this.props.sdk.app.getParameters();\n\n    // Init object to store configuration\n    const fieldsConfig: { [key: string]: { [key: string]: string[] } } =\n      parameters?.fieldsConfig || {};\n    // Get content types from the space the app is installed in\n    const spaceContentTypes = await this.props.sdk.space.getContentTypes();\n    // Find content types with a \"layout\" property, ignore the rest\n    const layoutContentTypes = spaceContentTypes.items\n      .filter((contentType: any) =>\n        contentType.fields.some((field: FieldAPI) => field.id === 'layout')\n      )\n      .map((contentType: any) => {\n        // Find possible layout values, using the validations array\n        const availableLayoutsObject = contentType.fields\n          .find((field: FieldAPI) => field.id === 'layout')\n          .validations?.find((validation: any) => {\n            return validation.in !== undefined;\n          });\n        const availableLayouts = availableLayoutsObject.in;\n        fieldsConfig[contentType.sys.id] =\n          fieldsConfig[contentType.sys.id] || {};\n        availableLayouts.forEach((layout: string) => {\n          fieldsConfig[contentType.sys.id][layout] =\n            fieldsConfig[contentType.sys.id][layout] || [];\n        });\n        return {\n          friendlyName: contentType.name,\n          value: contentType.sys.id,\n          fields: contentType.fields,\n          availableLayouts,\n        };\n      });\n\n    this.setState(\n      parameters\n        ? {\n            parameters: {\n              fieldsConfig,\n            },\n            currentContentType: layoutContentTypes[0]?.value,\n            contentTypes: {},\n            layoutContentTypes,\n            fields: layoutContentTypes[0]?.fields || [],\n            availableLayouts: layoutContentTypes[0]?.availableLayouts || [],\n          }\n        : this.state,\n      () => {\n        // Once preparation has finished, call `setReady` to hide\n        // the loading screen and present the app to a user.\n        this.props.sdk.app.setReady();\n      }\n    );\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    // const currentState = await this.props.sdk.app.getCurrentState();\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // parameters: {\n      //   fieldsConfig: this.state.parameters.fieldsConfig,\n      // },\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      // targetState: currentState,\n    };\n  };\n\n  handleChange = (e: any) => {\n    const selected = this.state.layoutContentTypes.find(\n      (t) => t.value === e.target.value\n    );\n    this.setState((state) => ({\n      ...state,\n      currentContentType: e.target.value,\n      fields: selected.fields,\n      availableLayouts: selected.availableLayouts,\n    }));\n  };\n\n  handleClick = (layout: string, fieldId: string) => {\n    this.setState((state) => {\n      let newFields = [];\n      const fields =\n        state.parameters.fieldsConfig[state.currentContentType][layout];\n      if (fields.includes(fieldId)) {\n        console.log(`Layout \"${layout} will HIDE \"${fieldId}\" 🙈`);\n        newFields = fields.filter((field) => field !== fieldId);\n      } else {\n        console.log(`Layout \"${layout} will SHOW \"${fieldId}\" ✅`);\n        newFields = [...fields, fieldId];\n      }\n      return {\n        ...state,\n        parameters: {\n          ...state.parameters,\n          fieldsConfig: {\n            ...state.parameters.fieldsConfig,\n            [state.currentContentType]: {\n              ...state.parameters.fieldsConfig[state.currentContentType],\n              [layout]: newFields,\n            },\n          },\n        },\n      };\n    });\n  };\n\n  render() {\n    return (\n      <Workbench className={css({ margin: '80px' })}>\n        <Form>\n          <Heading>Layout Selector Setup</Heading>\n          <Paragraph>\n            Choose a Content Model that will use this Entry Editor app\n          </Paragraph>\n\n          {this.state.layoutContentTypes.length <= 0 && (\n            <Note noteType=\"negative\">\n              Your space does not contain any Content Models with an id of\n              \"layout\"\n            </Note>\n          )}\n          <Select\n            id=\"optionSelect\"\n            name=\"optionSelect\"\n            width=\"large\"\n            onChange={this.handleChange}>\n            {this.state.layoutContentTypes.map((option) => (\n              <Option key={option.value} value={option.value}>\n                {option.friendlyName}\n              </Option>\n            ))}\n          </Select>\n\n          <Paragraph>\n            <b>NOTE:</b> The Content Model must have a field called \"layout\" to\n            be visible here. The layout field should have a <i>validation</i>{' '}\n            set to only accept certain values. These values will be listed here\n            and you may choose to display or hide them when a user has chosen a\n            layout.\n          </Paragraph>\n\n          <Note>\n            Every time these settings are saved, you must add the entry editor\n            to the content model again.\n          </Note>\n\n          <Table>\n            <TableHead>\n              <TableRow>\n                {this.state.availableLayouts?.map((availableLayout) => {\n                  return (\n                    <TableCell key={availableLayout}>\n                      {availableLayout}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            </TableHead>\n\n            <TableBody>\n              {this.state.fields.length > 0 &&\n                this.state.fields.map((field) => {\n                  if (field.id === 'layout') {\n                    return null;\n                  }\n                  return (\n                    <TableRow key={field.id}>\n                      {this.state.availableLayouts.map((availableLayout) => {\n                        return (\n                          <TableCell\n                            key={availableLayout}\n                            onClick={(e) =>\n                              this.handleClick(availableLayout, field.id)\n                            }>\n                            {this.state.parameters.fieldsConfig[\n                              this.state.currentContentType\n                            ][availableLayout].includes(field.id)\n                              ? '✅'\n                              : '🚫'}\n                            <span> {field.name}</span>\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </Form>\n      </Workbench>\n    );\n  }\n}\n","import 'codemirror/lib/codemirror.css';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/field-editor-date/styles/styles.css';\nimport React from 'react';\nimport {\n  Paragraph,\n  Heading,\n  Note,\n} from '@contentful/forma-36-react-components';\nimport { FieldAPI, FieldExtensionSDK } from '@contentful/app-sdk';\nimport {\n  Field as DefaultField,\n  FieldWrapper as DefaultFieldWrapper,\n} from '@contentful/default-field-editors';\nimport tokens from '@contentful/forma-36-tokens';\n\ninterface FieldProps {\n  field: FieldAPI;\n  sdk: FieldExtensionSDK;\n}\n\nconst Field = (props: FieldProps) => {\n  // these properties are mocked to make the entryFieldAPI\n  // work, or at least not crash, when used in the place of FieldAPI\n  const extendedField = props.field as any as FieldAPI;\n\n  extendedField.onSchemaErrorsChanged = () => () => null;\n  extendedField.setInvalid = () => null;\n  extendedField.locale = props.sdk.locales.default;\n\n  const fieldDetails = props.sdk.contentType.fields.find(\n    ({ id }) => id === extendedField.id\n  );\n\n  const fieldEditorInterface = props.sdk.editor.editorInterface?.controls?.find(\n    ({ fieldId }) => fieldId === extendedField.id\n  );\n\n  const extendedSDK: FieldExtensionSDK = {\n    ...props.sdk,\n    field: extendedField,\n  };\n\n  const renderHeading =\n    extendedField.id === 'layout'\n      ? (name: string) => (\n          <>\n            <Heading>{name}</Heading>\n            <Paragraph>\n              Choose a layout to display relevant fields only\n            </Paragraph>\n          </>\n        )\n      : undefined;\n\n  if (fieldDetails && fieldEditorInterface) {\n    return (\n      <div style={{ fontFamily: tokens.fontStackPrimary }}>\n        <DefaultFieldWrapper\n          sdk={extendedSDK}\n          renderHeading={renderHeading}\n          name={fieldDetails.name}>\n          <DefaultField\n            sdk={extendedSDK}\n            widgetId={fieldEditorInterface.widgetId}\n          />\n        </DefaultFieldWrapper>\n      </div>\n    );\n  }\n\n  return (\n    <Note noteType=\"negative\">\n      Something went wrong. Try clicking on the \"Editor\" tab or reload the page.\n    </Note>\n  );\n};\n\nexport default Field;\n","import React from 'react';\n// import { Paragraph, Typography } from '@contentful/forma-36-react-components';\nimport {\n  EditorExtensionSDK,\n  FieldAPI,\n  FieldExtensionSDK,\n} from '@contentful/app-sdk';\nimport { useState } from 'react';\nimport Field from './Field';\nimport { useEffect } from 'react';\nimport { EntryFieldAPI } from '@contentful/app-sdk';\nimport { EntryAPI } from '@contentful/app-sdk';\nimport { ContentType } from '@contentful/app-sdk';\nimport tokens from '@contentful/forma-36-tokens';\n\ninterface LayoutConfig {\n  [key: string]: string[];\n}\n\nexport interface FieldsConfig {\n  [key: string]: LayoutConfig;\n}\n\ninterface EditorProps {\n  sdk: EditorExtensionSDK;\n  fieldsConfig: FieldsConfig;\n}\n\nfunction visibleFieldKeysFor(\n  contentType: ContentType,\n  layout: string,\n  config: FieldsConfig\n) {\n  if (layout === undefined) {\n    return ['layout'];\n  }\n  if (!config[contentType.sys.id][layout]) {\n    console.log(config);\n    throw new Error(`The \"${layout}\" layout is not implemented yet`);\n  }\n  const allFields = contentType.fields.map((field) => field.id);\n  const visibleFields = allFields.filter((f: string) =>\n    config[contentType.sys.id][layout].includes(f)\n  );\n  return ['layout', ...visibleFields];\n}\n\nfunction getFieldsForKeys(entry: EntryAPI, keys: string[]) {\n  return keys.map((key) => entry.fields[key]);\n}\n\nconst Entry = (props: EditorProps) => {\n  const [visibleFields, setVisibleFields] = useState<EntryFieldAPI[]>([]);\n\n  useEffect(() => {\n    return props.sdk.entry.fields.layout.onValueChanged((layout: string) => {\n      const fieldKeys = visibleFieldKeysFor(\n        props.sdk.contentType,\n        layout,\n        props.fieldsConfig\n      );\n      setVisibleFields(getFieldsForKeys(props.sdk.entry, fieldKeys));\n    });\n  }, [props.sdk, props.fieldsConfig]);\n\n  return (\n    <>\n      {visibleFields.map((field) => {\n        return (\n          <div\n            key={field.id}\n            style={\n              field.id === 'layout'\n                ? {\n                    padding: `${tokens.spacingM} 0 1px`,\n                    background: tokens.colorElementLightest,\n                    borderBottom: `1px solid ${tokens.colorElementMid}`,\n                  }\n                : undefined\n            }>\n            <Field\n              field={field as unknown as FieldAPI}\n              sdk={props.sdk as FieldExtensionSDK}\n            />\n            {/* <Typography\n              style={{ padding: `${tokens.spacing2Xs} ${tokens.spacingXl}` }}>\n              {field.id === 'layout' &&\n                props.sdk.entry.fields.layout.getValue() && (\n                  <Paragraph>\n                    We could have a preview or a short description for the \"\n                    {props.sdk.entry.fields.layout.getValue()}\" layout here...\n                  </Paragraph>\n                )}\n            </Typography> */}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nexport default Entry;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  AppExtensionSDK,\n  // FieldExtensionSDK,\n  // SidebarExtensionSDK,\n  // DialogExtensionSDK,\n  EditorExtensionSDK,\n  // PageExtensionSDK,\n  init,\n  locations,\n} from '@contentful/app-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Config from './components/ConfigScreen';\nimport EntryEditor from './components/EntryEditor';\n// import Page from './components/Page';\n// import Sidebar from './components/Sidebar';\n// import Field from './components/Field';\n// import Dialog from './components/Dialog';\n\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk) => {\n    const root = document.getElementById('root');\n\n    const { fieldsConfig } = sdk.parameters.installation as any;\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      {\n        location: locations.LOCATION_APP_CONFIG,\n        component: <Config sdk={sdk as AppExtensionSDK} />,\n      },\n      // {\n      //   location: locations.LOCATION_ENTRY_FIELD,\n      //   component: <Field sdk={sdk as FieldExtensionSDK} />,\n      // },\n      {\n        location: locations.LOCATION_ENTRY_EDITOR,\n        component: (\n          <EntryEditor\n            sdk={sdk as EditorExtensionSDK}\n            fieldsConfig={fieldsConfig}\n          />\n        ),\n      },\n      // {\n      //   location: locations.LOCATION_DIALOG,\n      //   component: <Dialog sdk={sdk as DialogExtensionSDK} />,\n      // },\n      // {\n      //   location: locations.LOCATION_ENTRY_SIDEBAR,\n      //   component: <Sidebar sdk={sdk as SidebarExtensionSDK} />,\n      // },\n      // {\n      //   location: locations.LOCATION_PAGE,\n      //   component: <Page sdk={sdk as PageExtensionSDK} />,\n      // },\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach((componentLocationSetting) => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}